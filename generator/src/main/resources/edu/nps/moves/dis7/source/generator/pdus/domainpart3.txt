  //@formatter:on

  private static Domain _inst(Object o)
  {
    Domain d = new Domain();
    d.enumInst = o;
    d.init();
    return d;
  }
  private void init()
  {
    Class c = enumInst.getClass();
    try {
      //@formatter:off
      marshalBuff =   c.getDeclaredMethod("marshal",       new Class[]{ByteBuffer.class});
      marshalDos =    c.getDeclaredMethod("marshal",       new Class[]{DataOutputStream.class});
      unmarshalBuff = c.getDeclaredMethod("unmarshalEnum", new Class[]{ByteBuffer.class});
      unmarshalDis =  c.getDeclaredMethod("unmarshalEnum", new Class[]{DataInputStream.class});
      mSize =         c.getDeclaredMethod("getMarshalledSize", (Class[]) null);
      getValue =      c.getDeclaredMethod("getValue",          (Class[]) null);
      getDescription =c.getDeclaredMethod("getDescription",    (Class[]) null);
      //@formatter:on
    }
    catch (NoSuchMethodException ex) {
      System.err.println("Can't find methods in "+c.getSimpleName());
    } 
  }
  public int getValue()
  {
    return (Integer) invoke(getValue, (Object[]) null);
  }

  public String getDescription()
  {
    return (String) invoke(getDescription, (Object[]) null);
  }

  /**
   * Returns size of this serialized (marshalled) object in bytes
   * See <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
   * @return serialized size in bytes
   */
  * @return serialized size in bytes
   
  {
    return (Integer) invoke(mSize, (Object[]) null);
  }

  public void marshal(DataOutputStream dos)
  {
    invoke(marshalDos, new Object[]{dos});
  }

  public void marshal(ByteBuffer buff)
  {
    invoke(marshalBuff, new Object[]{buff});
  }

  public int unmarshal(DataInputStream dis)
  {
    Object o = invoke(unmarshalDis, new Object[]{dis});
    enumInst = o;
    init();
    return getMarshalledSize();
  }

  public int unmarshal(ByteBuffer buff)
  {
    Object o = invoke(unmarshalBuff, new Object[]{buff});
    enumInst = o;
    init();
    return getMarshalledSize();
  }

  private Object invoke(Method m, Object[] oa)
  {
    try {
      return m.invoke(enumInst, oa);
    }
    catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException ex) {
      throw new RuntimeException("bad " + m.getName());
    }
  }

  @Override
  public String toString()
  {
    return getDescription();
  }
}
